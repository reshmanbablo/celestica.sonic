#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2024 Celestica. All Rights Reserved
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for qos_scheduler
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {
    'metadata_version': '1.1',
    'status': ['preview'],
    'supported_by': 'community',
    'license': 'Apache 2.0'
}

DOCUMENTATION = """
---
module: qos_scheduler
version_added: '1.0.0'
short_description: Resource module to configure QoS scheduler-policy.
description:
  - This module configures and manages QoS scheduler policy on devices running Celestica SONiC NOS.
author: Celestica SONiC Ansible Team (@dharmaraj-gurusamy)
notes:
  - Tested against Advanced Celestica SONiC, release 2.0.
  - This module works with connection C(network_cli).
options:
  config:
    description:
      - A dictionary of QoS scheduler policy configurations.
    type: dict
    suboptions:
      # QoS scheduler-policy config
      scheduler-policy:
        description:
          - QoS scheduler policy configurations.
        type: list
        elements: dict
        suboptions:
          name:
            description:
              - Name of the scheduler policy. Maximum of 32 characters.
            type: str
            required: true
          queue:
            description:
              - Queue configuration in scheduler.
            type: list
            elements: dict
            suboptions:
              id:
                description:
                  - Queue index or identifer, Range is 0-7.
                type: int
                required: true
              type:
                description:
                  - Queue scheduling type.
                type: str
                choices: [dwrr, wrr, strict]
              weight:
                description:
                  - Weight of the queue, Range is 1-100.
                type: int

      # QoS scheduler policy config on interfaces
      interface:
        description:
          - QoS scheduler policy configurations on interfaces.
        type: list
        elements: dict
        suboptions:
          name:
            description:
              - Full interface name, ie, Ethernet0.
              - Only Ethernet interfaces are allowed.
            type: str
            required: true
          scheduler-policy:
            description:
              - Scheduler policy name. Maximum of 32 characters.
            type: str

  state:
    description:
      - The state of the configuration after module completion.
      - C(merged) - Merge specified configuration with on-device running configuration.
      - C(deleted) - Delete the specified on-device running configuration or applies the default value.
    type: str
    choices:
      - merged
      - deleted
    default: merged
"""
EXAMPLES = """
# Using state : merged
#
# Before state:
# -------------
#
# Celestica-DS1000# show qos scheduler-policy
# Scheduler Policy: policy1
#   queue: 1
#          type   : DWRR
#          weight : 3

# Celestica-DS1000#
#
# Play:
# ----
#
    - name: Merge QoS Scheduler Configuration
      celestica.sonic.qos_scheduler:
        config:
          scheduler-policy:
            - name: policy2
              queue:
                - id: 2
                  type: dwrr
                  weight: 3
                - id: 3
                  type: wrr
                  weight: 4
            - name: policy3
              queue:
                - id: 1
                  type: strict
                  weight: 5

        state: merged

# After state:
# ------------
#
# Celestica-DS1000# show qos scheduler-policy
# Scheduler Policy: policy1
#   queue: 1
#          type   : DWRR
#          weight : 3

# Scheduler Policy: policy2
#   queue: 2
#          type   : DWRR
#          weight : 3
#   queue: 3
#          type   : WRR
#          weight : 4

# Scheduler Policy: policy3
#   queue: 1
#          type   : STRICT
#          weight : 5

# Celestica-DS1000#


# Using state : merged
#
# Before state:
# -------------
#
# Celestica-DS1000# show qos scheduler-policy interface Ethernet all
# Interface : Ethernet0
#   Scheduler Policy: policy1

# Celestica-DS1000#
#
# Play:
# ----
#
    - name: Merge QoS Scheduler-Interface Configuration
      celestica.sonic.qos_scheduler:
        config:
          interface:
            - name: Ethernet0
              scheduler-policy: policy2
            - name: Ethernet1
              scheduler-policy: policy1

        state: merged

# After state:
# ------------
#
# Celestica-DS1000# show qos scheduler-policy interface Ethernet all
# Interface : Ethernet0
#   Scheduler Policy: policy2

# Interface : Ethernet1
#   Scheduler Policy: policy1

# Celestica-DS1000#


# Using state : deleted
#
# Before state:
# -------------
#
# Celestica-DS1000# show qos scheduler-policy
# Scheduler Policy: policy1
#   queue: 1
#          type   : DWRR
#          weight : 3

# Scheduler Policy: policy2
#   queue: 2
#          type   : DWRR
#          weight : 3
#   queue: 3
#          type   : WRR
#          weight : 4

# Scheduler Policy: policy3
#   queue: 1
#          type   : STRICT
#          weight : 5

# Celestica-DS1000#
#
# Play:
# ----
#

    - name:  Delete QoS Scheduler Configuration
      celestica.sonic.qos_scheduler:
        config:
          scheduler-policy:
            - name: policy1
            - name: policy2
              queue:
                - id: 2
                  type: dwrr
                - id: 3
            - name: policy3
              queue:
                - id: 1
                  weight: 5

        state: deleted

# After state:
# ------------
#
# Celestica-DS1000# show qos scheduler-policy
# Scheduler Policy: policy2
#   queue: 2
#          type   : WRR
#          weight : 1

# Scheduler Policy: policy3
#   queue: 1
#          type   : STRICT
#          weight : 1

# Celestica-DS1000#


# Using state : deleted
#
# Before state:
# -------------
#
# Celestica-DS1000# show qos scheduler-policy interface Ethernet all
# Interface : Ethernet0
#   Scheduler Policy: policy2

# Interface : Ethernet1
#   Scheduler Policy: policy1

# Celestica-DS1000#
#
# Play:
# ----
#
    - name:  Delete QoS Scheduler-Interface Configuration
      celestica.sonic.qos_scheduler:
        config:
          interface:
            - name: Ethernet1
              scheduler-policy: policy1

        state: deleted

# After state:
# ------------
#
# Celestica-DS1000# show qos scheduler-policy interface Ethernet all
# Interface : Ethernet0
#   Scheduler Policy: policy2

# Celestica-DS1000#


"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['command 1', 'command 2', 'command 3']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible_collections.celestica.sonic.plugins.module_utils.network.sonic.argspec.qos_scheduler.qos_scheduler import Qos_schedulerArgs
from ansible_collections.celestica.sonic.plugins.module_utils.network.sonic.config.qos_scheduler.qos_scheduler import Qos_scheduler


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=Qos_schedulerArgs.argument_spec,
                           supports_check_mode=True)

    result = Qos_scheduler(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
